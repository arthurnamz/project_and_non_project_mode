================================================================
              SIMPLE FSM-BASED CPU ARCHITECTURE
================================================================

                        ┌─────────────┐
                        │   CONTROL   │
                        │     FSM     │
                        └──────┬──────┘
                               │
                    ┌──────────┼──────────┐
                    │          │          │
          ┌─────────▼──┐   ┌───▼────┐  ┌─▼──────────┐
          │  PROGRAM   │   │  IR    │  │  STATE     │
          │  COUNTER   │   │ (10b)  │  │  REGISTER  │
          │   (3-bit)  │   └────────┘  └────────────┘
          └─────┬──────┘
                │
    ┌───────────▼───────────┐
    │  INSTRUCTION MEMORY   │
    │  (memory.v instance)  │
    │    Depth: 8 words     │
    │    Width: 10 bits     │
    │                       │
    │  Format (10 bits):    │
    │  [RES|OP2|OP1|OP]     │
    │  [3  |3  |3  |1 ]     │
    └───────────┬───────────┘
                │
        ┌───────▼──────┐
        │    DECODE    │
        │     UNIT     │
        └───────┬──────┘
                │
    ┌───────────┼───────────┐
    │           │           │
┌───▼───┐  ┌────▼────┐  ┌───▼───┐
│ Op1   │  │  Op2    │  │  Res  │
│ Addr  │  │  Addr   │  │ Addr  │
│ (3b)  │  │  (3b)   │  │ (3b)  │
└───┬───┘  └────┬────┘  └───┬───┘
    │           │           │
    └─────┬─────┘           │
          │                 │
    ┌─────▼─────────────┐   │
    │   DATA MEMORY     │   │
    │ (memory.v instance)   │
    │   Depth: 8 words  │   │
    │   Width: 8 bits   │   │
    └─────┬─────────────┘   │
          │                 │
    ┌─────▼─────┐           │
    │ Operand1  │           │
    │ Register  │           │
    │  (8-bit)  │           │
    └─────┬─────┘           │
          │                 │
    ┌─────▼─────┐           │
    │ Operand2  │           │
    │ Register  │           │
    │  (8-bit)  │           │
    └─────┬─────┘           │
          │                 │
    ┌─────▼──────┐          │
    │    ALU     │          │
    │  (ADD/NOT) │          │
    └─────┬──────┘          │
          │                 │
    ┌─────▼─────┐           │
    │  Result   │           │
    │ Register  │           │
    │  (8-bit)  │           │
    └─────┬─────┘           │
          │                 │
          └─────────────────┘
                  │
          (Write Back to Data Memory)

================================================================
                     FSM STATE DIAGRAM
================================================================

         ┌──────┐    start=1    ┌───────┐
    ┌───►│ IDLE ├──────────────►│ FETCH │
    │    └──────┘                └───┬───┘
    │                                │
    │                                │
    │                            ┌───▼────┐
    │                            │ DECODE │
    │                            └───┬────┘
    │                                │
    │                                │
    │                            ┌───▼───┐
    │                            │ LOAD  │
    │                            └───┬───┘
    │                                │
    │                                │
    │                          ┌─────▼──────┐
    │                          │  EXECUTE   │
    │                          └─────┬──────┘
    │                                │
    │                                │
    │         pc==7            ┌─────▼──────┐
    └──────────────────────────┤ WRITEBACK  │
                               └─────┬──────┘
                                     │
                                pc<7 │
                            ┌────────┘
                            │
                            └─────► (back to FETCH)

================================================================
                   INSTRUCTION SET
================================================================

┌────────┬─────────┬────────────────────────────────────┐
│ Opcode │ Name    │ Operation                          │
├────────┼─────────┼────────────────────────────────────┤
│   0    │  ADD    │ data[res] = data[op1] + data[op2]  │
│   1    │  NOT    │ data[res] = ~data[op1]             │
└────────┴─────────┴────────────────────────────────────┘

================================================================
                     TIMING DIAGRAM
================================================================

Instruction Execution (5 clock cycles):

CLK    : ___┐¯¯¯┐___┐¯¯¯┐___┐¯¯¯┐___┐¯¯¯┐___┐¯¯¯┐___
         
State  : FETCH | DECODE | LOAD | EXECUTE | WRITEBACK

Cycle 1: Fetch instruction from instr_mem[PC]
Cycle 2: Decode opcode, op1, op2, res addresses
Cycle 3: Load operands from data_mem
Cycle 4: Execute operation (ADD/NOT)
Cycle 5: Write result to data_mem[res], PC++

================================================================
                   MEMORY MAPPING
================================================================

INSTRUCTION MEMORY (10-bit words):
┌─────────┬──────────────────────────────────┐
│ Address │  Instruction (binary)            │
├─────────┼──────────────────────────────────┤
│  000    │  [RES|OP2|OP1|OP]                │
│  001    │  [RES|OP2|OP1|OP]                │
│  010    │  [RES|OP2|OP1|OP]                │
│  011    │  [RES|OP2|OP1|OP]                │
│  100    │  [RES|OP2|OP1|OP]                │
│  101    │  [RES|OP2|OP1|OP]                │
│  110    │  [RES|OP2|OP1|OP]                │
│  111    │  [RES|OP2|OP1|OP]                │
└─────────┴──────────────────────────────────┘

DATA MEMORY (8-bit words):
┌─────────┬────────────┐
│ Address │    Data    │
├─────────┼────────────┤
│  000    │  8-bit val │
│  001    │  8-bit val │
│  010    │  8-bit val │
│  011    │  8-bit val │
│  100    │  8-bit val │
│  101    │  8-bit val │
│  110    │  8-bit val │
│  111    │  8-bit val │
└─────────┴────────────┘

================================================================

