================================================================================
                    PIPELINED DOT PRODUCT SYSTEM ARCHITECTURE
================================================================================

INPUT DATA FLOW:
┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│ Memory A    │    │ Memory B    │    │ Dot Product │
│ (Vector A)  │    │ (Vector B)  │    │ Pipeline    │
└─────────────┘    └─────────────┘    └─────────────┘
       │                   │                   │
       │ A[0], A[1],       │ B[0], B[1],       │
       │ A[2], A[3]        │ B[2], B[3]        │
       │                   │                   │
       └───────────────────┼───────────────────┘
                           │
                    ┌─────────────┐
                    │ Memory Read │
                    │ Controller  │
                    └─────────────┘
                           │
                    A[i], B[i] pairs
                           │
                    ┌─────────────┐
                    │ Dot Product │
                    │ Pipeline    │
                    └─────────────┘

PIPELINE STAGES:
┌─────────────┐    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│   Stage 0   │───▶│   Stage 1   │───▶│   Stage 2   │───▶│   Stage 3   │
│             │    │             │    │             │    │             │
│ A[i] * B[i] │    │ Pipeline    │    │ Pipeline    │    │ Final       │
│ + Accum     │    │ Pass        │    │ Pass        │    │ Result      │
│             │    │             │    │             │    │             │
│ Valid       │    │ Valid       │    │ Valid       │    │ Valid       │
│ Element=0   │    │ Element=1   │    │ Element=2   │    │ Element=3   │
│ Vector_Done │    │ Vector_Done │    │ Vector_Done │    │ Vector_Done │
└─────────────┘    └─────────────┘    └─────────────┘    └─────────────┘
       │                   │                   │                   │
       │                   │                   │                   │
   ┌───▼───┐           ┌───▼───┐           ┌───▼───┐           ┌───▼───┐
   │ A[0]*B[0]         │ A[1]*B[1]         │ A[2]*B[2]         │ A[3]*B[3] │
   │ + 0               │ + A[0]*B[0]       │ + Acc[1]          │ + Acc[2]  │
   │ = Acc[0]          │ = Acc[1]          │ = Acc[2]          │ = Final   │
   └───────────────────┴───────────────────┴───────────────────┴───────────┘

TIMING DIAGRAM:
Clock:   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14
         │   │   │   │   │   │   │   │   │   │   │   │   │   │   │
Input:   A0  A1  A2  A3  -   -   -   -   -   -   -   -   -   -   -
         B0  B1  B2  B3
         
Stage 0: -   A0  A1  A2  A3  -   -   -   -   -   -   -   -   -   -
         -   B0  B1  B2  B3
         -   P0  P1  P2  P3  -   -   -   -   -   -   -   -   -   -
         
Stage 1: -   -   A0  A1  A2  A3  -   -   -   -   -   -   -   -   -
         -   -   B0  B1  B2  B3
         -   -   P0  P1  P2  P3  -   -   -   -   -   -   -   -   -
         
Stage 2: -   -   -   A0  A1  A2  A3  -   -   -   -   -   -   -   -
         -   -   -   B0  B1  B2  B3
         -   -   -   P0  P1  P2  P3  -   -   -   -   -   -   -   -
         
Stage 3: -   -   -   -   A0  A1  A2  A3  -   -   -   -   -   -   -
         -   -   -   -   B0  B1  B2  B3
         -   -   -   -   P0  P1  P2  P3  -   -   -   -   -   -   -
         
Result:  -   -   -   -   -   -   -   -   R   -   -   -   -   -   -
Valid:   -   -   -   -   -   -   -   -   V   -   -   -   -   -   -

Where:
- A0, A1, A2, A3 = Vector A elements
- B0, B1, B2, B3 = Vector B elements  
- P0, P1, P2, P3 = Partial products (A[i] * B[i])
- R = Final dot product result
- V = Result valid signal

PIPELINE ADVANTAGES:
1. Continuous Processing: After initial latency, one result per clock cycle
2. Parallel Execution: Multiple vector elements processed simultaneously
3. High Throughput: VECTOR_WIDTH elements per clock cycle
4. Low Latency: Only VECTOR_WIDTH clock cycles total latency

SYSTEM INTEGRATION:
┌─────────────────────────────────────────────────────────────────────────┐
│                        COMPLETE SYSTEM                                  │
├─────────────────────────────────────────────────────────────────────────┤
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐                │
│  │ Memory      │    │ Memory      │    │ Memory      │                │
│  │ Controller  │───▶│ Read        │───▶│ Dot Product │                │
│  │ (Write)     │    │ Controller  │    │ Pipeline    │                │
│  └─────────────┘    └─────────────┘    └─────────────┘                │
│         │                   │                   │                      │
│         ▼                   ▼                   ▼                      │
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐                │
│  │ Memory A    │    │ Vector A    │    │ Result      │                │
│  │ (mem1)      │    │ Elements    │    │ Output      │                │
│  └─────────────┘    └─────────────┘    └─────────────┘                │
│         │                   │                   │                      │
│         ▼                   ▼                   ▼                      │
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────┐                │
│  │ Memory B    │    │ Vector B    │    │ Valid       │                │
│  │ (mem2)      │    │ Elements    │    │ Signal      │                │
│  └─────────────┘    └─────────────┘    └─────────────┘                │
└─────────────────────────────────────────────────────────────────────────┘

================================================================================
